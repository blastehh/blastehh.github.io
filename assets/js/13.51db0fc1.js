(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{283:function(e,t,a){e.exports=a.p+"assets/img/initscript.4e917e27.png"},346:function(e,t,a){"use strict";a.r(t);var s=a(12),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"freenas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#freenas"}},[e._v("#")]),e._v(" FreeNAS")]),e._v(" "),t("hr"),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#changing-the-active-directory-account-used-by-freenas"}},[e._v("Changing the Active Directory account used by FreeNAS")])]),t("li",[t("a",{attrs:{href:"#wiping-active-directory-settings-from-freenas"}},[e._v("Wiping Active Directory settings from FreeNAS")])]),t("li",[t("a",{attrs:{href:"#rejoin-domain"}},[e._v("Rejoin Domain")])]),t("li",[t("a",{attrs:{href:"#wiping-zfs-metadata"}},[e._v("Wiping ZFS metadata")])]),t("li",[t("a",{attrs:{href:"#firewall"}},[e._v("Firewall")]),t("ul",[t("li",[t("a",{attrs:{href:"#create-the-rules"}},[e._v("Create the rules")])]),t("li",[t("a",{attrs:{href:"#add-startup-script"}},[e._v("Add startup script")])])])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"changing-the-active-directory-account-used-by-freenas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#changing-the-active-directory-account-used-by-freenas"}},[e._v("#")]),e._v(" Changing the Active Directory account used by FreeNAS")]),e._v(" "),t("p",[e._v("If you try to change the account name that FreeNAS uses to connect to Active Directory, it will probably give you a weird error that doesn't make any sense."),t("br"),e._v("\nYou'll need to modify the file at "),t("code",[e._v("/etc/directoryservice/ActiveDirectory/config")]),t("br"),e._v("\nThere will be an entry for "),t("code",[e._v("ad_bindname=")]),e._v(" and "),t("code",[e._v("ad_binddn=")]),e._v(". Change these accordingly.")]),e._v(" "),t("h2",{attrs:{id:"wiping-active-directory-settings-from-freenas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wiping-active-directory-settings-from-freenas"}},[e._v("#")]),e._v(" Wiping Active Directory settings from FreeNAS")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Ensure that all AD/SMB services have been stopped")])]),e._v(" "),t("li",[t("p",[e._v("Rename/delete the file at "),t("code",[e._v("/etc/directoryservice/ActiveDirectory/config")])])]),e._v(" "),t("li",[t("p",[e._v("Delete the settings from the sqlite db"),t("br"),e._v("\nConnect to the database file")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("sqlite3 /data/freenas-v1.db\n")])])]),t("p",[e._v("Turn on headers so you can see what the column names are")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v(".headers on\n")])])]),t("p",[e._v("Check that your settings are in this table")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" SELECT * FROM directoryservice_activedirectory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[e._v("Delete the settings from the "),t("code",[e._v("directoryservice_activedirectory")]),e._v(" table")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" DELETE FROM directoryservice_activedirectory WHERE "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("id")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Delete/Rename "),t("code",[e._v("*.tdb")]),e._v(" files from "),t("code",[e._v("/var/db/system/samba4")])])])]),e._v(" "),t("h2",{attrs:{id:"rejoin-domain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rejoin-domain"}},[e._v("#")]),e._v(" Rejoin Domain")]),e._v(" "),t("p",[e._v("If FreeNAS won't rejoin the domain after a computer name change, try "),t("a",{attrs:{href:"wiping-active-directory-settings-from-freenas"}},[e._v("Wiping AD")]),e._v(" first, re-add your settings in the UI and then run:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("net ads "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("join")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-U")]),e._v(" Administrator\n")])])]),t("p",[e._v("You should be able to use any Admin account in place of "),t("code",[e._v("Administrator")])]),e._v(" "),t("h2",{attrs:{id:"wiping-zfs-metadata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wiping-zfs-metadata"}},[e._v("#")]),e._v(" Wiping ZFS metadata")]),e._v(" "),t("p",[e._v("Disks that have been used in a ZFS raid will have metadata stored at the end of the disk")]),e._v(" "),t("p",[e._v("You'll need to enable debug flags to run the dd commands")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sysctl")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("kern.geom.debugflags")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v("\n")])])]),t("p",[e._v("The example  below uses "),t("code",[e._v("sh")]),e._v(" to loop through disks "),t("code",[e._v("da0")]),e._v(" through "),t("code",[e._v("da15")]),e._v(" and zeroes the metadata at the end of the disk.\nYou may also need to zero the beginning of the disk in some cases.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[e._v("i")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("seq")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("dd")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/dev/zero "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("of")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/dev/da"),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$i")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("bs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1m "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("oseek")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("diskinfo da$i "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print int($3 / (1024*1024)) - 5;}'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("done")]),e._v("\n")])])]),t("p",[e._v("Use this for a single disk, replace "),t("code",[e._v("<DISK>")]),e._v(" with the disk that you want to wipe.")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("dd")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/dev/zero "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("of")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/dev/"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("DISK"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("bs")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("1m "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("oseek")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("diskinfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("DISK"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{print int($3 / (1024*1024)) - 5;}'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v("\n")])])]),t("h2",{attrs:{id:"firewall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#firewall"}},[e._v("#")]),e._v(" Firewall")]),e._v(" "),t("p",[e._v("Freenas doesn't come with an interface for creating firewall rules, this will need to be done by hand.")]),e._v(" "),t("h3",{attrs:{id:"create-the-rules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-the-rules"}},[e._v("#")]),e._v(" Create the rules")]),e._v(" "),t("p",[e._v("Create a firewall rules file, mine is named "),t("code",[e._v("firewall.rules")]),e._v("."),t("br"),e._v("\nThis file will need to be stored on one of your zpools so that it does not get lost in an update/upgrade.\nThe rules are numbered from 1-65535, but 65535 is reserved, so you can use 1-65534.\nThe simplified format for the rules is: "),t("code",[e._v("<Rule Number> <Allow/Deny> <Protocol> from <Lookup Table/Address> to <Lookup Table/Address> [dst-port <Port Number/Port Name>] [Options]")])]),e._v(" "),t("p",[e._v("Available protocols found in "),t("code",[e._v("/etc/protocols")]),t("br"),e._v("\nAvailable port names found in "),t("code",[e._v("/etc/services")]),t("br"),e._v("\nReference "),t("a",{attrs:{href:"https://www.freebsd.org/cgi/man.cgi?query=ipfw&sektion=8&manpath=freebsd-release-ports",target:"_blank",rel:"noopener noreferrer"}},[e._v("man page"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#!/bin/sh\n\n# Flush all rules before we begin.\nipfw -q -f flush\n\ncmd="ipfw -q add "\n\n# allow all for localhost\n$cmd 10 allow ip from any to any via lo0\n\n# checks stateful rules.  If marked as "keep-state" the packet has\n# already passed through filters and is "OK" without futher\n# rule matching\n$cmd 100 check-state\n$cmd 101 allow tcp from any to any established\n# Allow outgoing traffic\n$cmd 102 allow all from any to any out keep-state\n\n# Allow pings, because why not?\n$cmd 103 allow icmp from any to any\n\n# Allow SSH\n$cmd 110 allow tcp from 192.168.0.0/24 to me dst-port 22\n\n# Allow SNMP\n$cmd 200 allow udp from 192.168.10.200 to me dst-port 161\n\n# Allow web UI\n$cmd 410 allow tcp from 192.168.0.0/24 to me dst-port 80\n$cmd 420 allow tcp from 192.168.0.0/24 to me dst-port 443\n# Allow CIFS\n$cmd 500 allow tcp from any to me dst-port 445\n$cmd 501 allow udp from any to me dst-port 445\n$cmd 505 allow tcp from any to me dst-port 139\n$cmd 506 allow udp from any to me dst-port 137\n$cmd 507 allow udp from any to me dst-port 138\n# Explicitly block services\n$cmd 60000 deny tcp from any to me dst-port 22\n$cmd 60010 deny tcp from any to me dst-port 80\n$cmd 60020 deny tcp from any to me dst-port 443\n\n# You can change this to deny instead of allow if you want to block by default.\n$cmd 65530 allow ip from any to any\n\n# ipfw built-in default, don\'t uncomment\n# $cmd 65535 deny ip from any to any\n')])])]),t("h3",{attrs:{id:"add-startup-script"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add-startup-script"}},[e._v("#")]),e._v(" Add startup script")]),e._v(" "),t("p",[e._v("You'll need to tell FreeNAS to add these rules every time it reboots.")]),e._v(" "),t("ol",[t("li",[e._v("From the Web GUI, navigate to "),t("code",[e._v("Tasks")]),e._v(" > "),t("code",[e._v("Init/Shtudown Scripts")])]),e._v(" "),t("li",[e._v("Click Add at the top right")]),e._v(" "),t("li",[e._v("Change the "),t("code",[e._v("Type")]),e._v(" to "),t("code",[e._v("Script")])]),e._v(" "),t("li",[e._v("Locate your "),t("code",[e._v("firewall.rules")]),e._v(" file and then select it")]),e._v(" "),t("li",[e._v("Change "),t("code",[e._v("When")]),e._v(" to "),t("code",[e._v("Post Init")])]),e._v(" "),t("li",[e._v("Make sure the "),t("code",[e._v("Enabled")]),e._v(" box is checked")]),e._v(" "),t("li",[e._v("Click "),t("code",[e._v("SAVE")])])]),e._v(" "),t("p",[t("img",{attrs:{src:a(283),alt:""}}),e._v(" "),t("MediumZoom")],1)])}),[],!1,null,null,null);t.default=r.exports}}]);